<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://kento85.github.io/atom.xml" rel="self"/>
  
  <link href="https://kento85.github.io/"/>
  <updated>2021-10-31T11:10:37.720Z</updated>
  <id>https://kento85.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>有关汇编</title>
    <link href="https://kento85.github.io/2021/10/31/%E6%9C%89%E5%85%B3%E6%B1%87%E7%BC%96/"/>
    <id>https://kento85.github.io/2021/10/31/%E6%9C%89%E5%85%B3%E6%B1%87%E7%BC%96/</id>
    <published>2021-10-31T10:16:49.000Z</published>
    <updated>2021-10-31T11:10:37.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CPU对存储器的读写"><a href="#CPU对存储器的读写" class="headerlink" title="CPU对存储器的读写"></a>CPU对存储器的读写</h2><p>​       存储器被划分为多个存储单元，存储单元从零开始顺序编号，<u>这些编号可以看作存储单元在存储器中的地址</u>。就像一条街，每个房子都有门牌号码。</p><p>​        CPU要从内存中读取数据，首先要指定存储单元的地址，也就是说它要先确定它要读取哪一个存储单元中的数据。就像在一条街上找人，先要确定他住在哪个房子里。</p><p>​        可见，CPU要想进行数据的读写，必须和外部器件（标准说法是芯片）进行下面3类信息的交互：</p><pre><code>     存储单元的地址(地址信息)；     器件的选择，读或写的命令(控制信息)；     读或写的数据(数据信息)。</code></pre><h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2><p>​       那么CPU是通过什么将地址、数据和控制信息传到存储器芯片中的呢？电子计算机能处理、传输的信息都是电信号，电信号当然要用导线传送。在计算机中专门有连接CPU和其他芯片的导线，通常称为<strong>总线</strong>。根据传送信息的不同，总线从逻辑上又分为3类，地址总线、控制总线和数据总线。</p><h4 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h4><p>​       现在我们知道，CPU是通过地址总线来指定存储器单元的。可见地址总线上能传送多少个不同的信息，CPU就可以对多少个存储单元进行寻址。</p><p>​        <strong>一个CPU有N根地址线，则可以说这个CPU的地址总线宽度为N。这样的CPU最多可以寻找2的N次方个内存单元。</strong></p><h4 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h4><p>​       CPU与内存或其他器件之间的数据传送是通过数据总线来进行的。<strong>数据总线的宽度决定了CPU和外界的数据传送速度。</strong>8根数据总线一次可以传送一个8位二进制数据即一个字节，16根数据总线一次可传送两个字节。</p><h4 id="控制总线"><a href="#控制总线" class="headerlink" title="控制总线"></a>控制总线</h4><p>​       CPU对外部器件的控制是通过控制总线来进行的，在这里控制总线是个总称，控制总线是一些不同控制线的集合。有多少根控制总线，就意味着CPU提供了对外部器件的多少种控制。所以，控制总线的宽度决定了CPU对外部器件的控制能力。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><strong>每一种CPU都有自己的汇编指令集。</strong></li><li><strong>CPU可以直接使用的信息在存储器中存放。</strong></li><li><strong>在存储器中指令和数据没有任何差别，都是二进制信息。</strong></li><li><strong>存储单元开始从零顺序编号。</strong></li><li><strong>一个存储单元可以存储8个bit，即8位二进制数。</strong></li><li><strong>地址总线的宽度决定了CPU的寻址能力。</strong></li><li><strong>数据总线的宽度决定了CPU与其他器件进行数据传送时的一次数据传送量。</strong></li><li><strong>控制总线的宽度决定了CPU对系统中其他器件的控制能力。</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CPU对存储器的读写&quot;&gt;&lt;a href=&quot;#CPU对存储器的读写&quot; class=&quot;headerlink&quot; title=&quot;CPU对存储器的读写&quot;&gt;&lt;/a&gt;CPU对存储器的读写&lt;/h2&gt;&lt;p&gt;​       存储器被划分为多个存储单元，存储单元从零开始顺序编号，&lt;u&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>程序的控制结构</title>
    <link href="https://kento85.github.io/2021/10/23/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
    <id>https://kento85.github.io/2021/10/23/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</id>
    <published>2021-10-23T03:47:55.000Z</published>
    <updated>2021-10-23T05:18:25.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h1><ul><li><em><strong>if语句</strong></em></li></ul><ol><li><em>if结构</em></li></ol><p>​        <strong>语法格式：if(表达式)  语句</strong> </p><p>​         注：在if语句中常用的比较两个数是否相等的表达式如“a==b”,这是关系表达式而不是赋值表达式”a=b“。</p><p>​    2. if-else结构</p><p>​         <strong>语法格式：if（表达式）语句1</strong></p><p>​                             <strong>else 语句二</strong></p><p>​      3.if-else嵌套结构</p><p>​          <strong>语法格式：if（表达式1）</strong></p><p>​                                     <strong>if（表达式2） 语句1</strong></p><p>​                                     <strong>else  语句2</strong></p><p>​                              <strong>else</strong></p><p>​                                     <strong>if（表达式3）语句3</strong></p><p>​                                     <strong>else 语句4</strong></p><p>​       例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">`y=<span class="number">-1</span>`</span><br><span class="line">`<span class="keyword">if</span>(x!=<span class="number">0</span>)`</span><br><span class="line">` &#123; <span class="keyword">if</span>(x&gt;<span class="number">0</span>)  y=<span class="number">1</span>; &#125;  `</span><br><span class="line">`<span class="keyword">else</span>`</span><br><span class="line">      `y=<span class="number">0</span>;`</span><br><span class="line">`<span class="built_in">printf</span>(<span class="string">&quot;y=%d\n&quot;</span>,y);`          </span><br></pre></td></tr></table></figure><p>​     理解：当x=-1上面程序段运行时，输出结果为y=-1，因为花括号”{ }”括起来的内容成为第一个if语句的复合语句，else与第一个if配对，而x=-1进入第一个if语句后不符合复合语句要求此时y的值仍然为-1，但由于x=-1符合第一个if语句则不会进入else语句，故y=-1。</p><p>此外，使用if-else结构的多层嵌套来实现多分支选择时，往往写成如下规范模式：</p><p>语法格式：<strong>if(表达式1)  语句 1</strong></p><p>​                   <strong>else if(表达式2) 语句 2</strong></p><p>​                    <strong>……</strong></p><p>​                   <strong>else if(表达式k) 语句 k</strong></p><p>​                    <strong>……</strong></p><p>​                   <strong>else if(表达式k) 语句 n</strong></p><p>​                    <strong>[else 语句 n+1]</strong></p><ul><li><p><strong>switch语句</strong></p><p>语法格式：switch ( 整型表达式 ){</p><pre><code>                  case 整型常量表达式 1：语句组：break;                  case 整型常量表达式 2 : 语句组：break;                  case 整型常量表达式 3 : 语句组：break;                  ……                  case 整型常量表达式 n :语句组：break;</code></pre><p>​                      [default:语句组 n+1]     </p><p>​                 }</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;选择结构&quot;&gt;&lt;a href=&quot;#选择结构&quot; class=&quot;headerlink&quot; title=&quot;选择结构&quot;&gt;&lt;/a&gt;选择结构&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;if语句&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;i</summary>
      
    
    
    
    
    <category term="博客" scheme="https://kento85.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="C语言" scheme="https://kento85.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Java 语言基础</title>
    <link href="https://kento85.github.io/2021/10/21/Java-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <id>https://kento85.github.io/2021/10/21/Java-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</id>
    <published>2021-10-21T15:34:35.000Z</published>
    <updated>2021-10-21T16:42:12.474Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Java语言中数据类型分为两大类型：1.<em>基本数据类型</em>   2.<em>引用数据类型</em>；</p></li><li><p>基本数据类型在内存中存放的是<strong>数据值本身</strong>，引用数据类型在内存中存放的是<strong>指向该数据的地址</strong>（引用数据类型的应用称为对象引用，亦被称为复合数据类型，在有的程序设计语言中称为指针）；</p></li><li><p>Java语言定义了4类共8种基本类型，它们的分类、关键字及占用字节数如下：</p></li></ul><table><thead><tr><th>数据类型</th><th>关键字</th><th>占用字节数</th></tr></thead><tbody><tr><td>整型</td><td>int</td><td>4</td></tr><tr><td>短整型</td><td>short</td><td>2</td></tr><tr><td>字节型</td><td>byte</td><td>1</td></tr><tr><td>长整型</td><td>long</td><td>8</td></tr><tr><td>单精度浮点型</td><td>float</td><td>4</td></tr><tr><td>双精度浮点型</td><td>double</td><td>8</td></tr><tr><td>布尔型</td><td>boolean</td><td>1</td></tr><tr><td>字符型</td><td>char</td><td>2</td></tr></tbody></table><ul><li>数值型常量的特殊值代码:</li></ul><blockquote><p><img src="Java-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/java.png"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Java语言中数据类型分为两大类型：1.&lt;em&gt;基本数据类型&lt;/em&gt;   2.&lt;em&gt;引用数据类型&lt;/em&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基本数据类型在内存中存放的是&lt;strong&gt;数据值本身&lt;/strong&gt;，引用数据类型在内存中存放的是&lt;st</summary>
      
    
    
    
    
    <category term="数据类型" scheme="https://kento85.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>“如何发布一篇博客”</title>
    <link href="https://kento85.github.io/2021/10/13/%E2%80%9C%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E2%80%9D/"/>
    <id>https://kento85.github.io/2021/10/13/%E2%80%9C%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E2%80%9D/</id>
    <published>2021-10-13T13:30:42.000Z</published>
    <updated>2021-10-13T14:00:42.694Z</updated>
    
    <content type="html"><![CDATA[<p>第一步：右键点击D目录下Blog，再点击Git Bush Here，执行“hexo n “博客标题””,点击D:\Blog\source_posts则会发现文件已生成；</p><p>第二步：点击文件用Markdown编辑器编辑博客内容；</p><p>第三步：打开Git Bush Here输入”hexo generate“命令产生静态文件；</p><p>第四步：输入”hexo server“，然后到http：//localhost:4000预览网站效果.</p><p>注：当博客网站打不开时，可右键点击Blog的Git Bush Here输入“hexo g &amp;&amp; hexo s”.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一步：右键点击D目录下Blog，再点击Git Bush Here，执行“hexo n “博客标题””,点击D:\Blog\source_posts则会发现文件已生成；&lt;/p&gt;
&lt;p&gt;第二步：点击文件用Markdown编辑器编辑博客内容；&lt;/p&gt;
&lt;p&gt;第三步：打开Git </summary>
      
    
    
    
    
    <category term="学习" scheme="https://kento85.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://kento85.github.io/2021/09/18/hello-world/"/>
    <id>https://kento85.github.io/2021/09/18/hello-world/</id>
    <published>2021-09-18T05:54:47.308Z</published>
    <updated>2021-09-18T05:54:47.308Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
